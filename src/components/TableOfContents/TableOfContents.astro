---
interface Props {
  headings: import("astro").MarkdownHeading[];
  levels?: 1 | 2 | 3; // how many levels of headers you want to show in TOC.
}

const { headings, levels = 2 } = Astro.props as Props;

// filter out all tags above depth level specified
const filteredHeadings = headings.filter((heading) => heading.depth <= levels + 1);

// console.log(JSON.stringify(headings, null, 4));
---

<div
  class="border-base-300 dark:border-base-600/60 mt-1 rounded-md border p-3 text-sm leading-tight xl:p-4"
>
  <ul class="flex flex-col gap-2">
    {
      filteredHeadings.map((heading) => (
        <li
          class:list={{
            "pl-3": heading.depth === 3,
            "pl-6": heading.depth === 4,
          }}
        >
          <a
            href={`#${heading.slug}`}
            class:list={[
              "toc-link hover:text-primary-600 dark:hover:text-primary-400 transition",
              "data-[active=true]:text-primary-600 data-[active=true]:dark:text-primary-400",
            ]}
          >
            {heading.text}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<!-- uses intersection observer to highlight which heading is in view -->
<script>
  // Wrapper for Blog post content
  let wrappingElement: Element | null;
  let observeHeaderTags: IntersectionObserver;
  let allHeaderTags: NodeListOf<Element>;

  // Function that runs when the Intersection Observer fires
  function setCurrent(e: IntersectionObserverEntry[]) {
    const allSectionLinks = document.querySelectorAll(".toc-link");
    e.map((i) => {
      if (i.isIntersecting === true) {
        allSectionLinks.forEach((link) => link.removeAttribute("data-active"));

        // require the href matching, and ".toc-link" class
        // this is in case you have other header links elsewhere in the post
        const targetLink = document.querySelector(`a[href="#${i.target.id}"].toc-link`);

        if (targetLink) targetLink.setAttribute("data-active", "true");
      }
    });
  }

  function initTOC() {
    wrappingElement = document.querySelector(".markdown-content");
    if (wrappingElement !== null) {
      // Get all H2/H3 tags from the post
      allHeaderTags = wrappingElement.querySelectorAll(":scope > h2, :scope > h3, :scope > h4");
    }

    // Intersection Observer Options
    const options: IntersectionObserverInit = {
      root: null,
      rootMargin: "0px 0px -50% 0px",
      threshold: [1],
    };

    // Each Intersection Observer runs setCurrent
    observeHeaderTags = new IntersectionObserver(setCurrent, options);
    if (wrappingElement === null) {
      return;
    }
    allHeaderTags.forEach((tag) => {
      // add scroll margin top to account for navbar
      tag.classList.add("scroll-mt-20");
      observeHeaderTags.observe(tag);
    });
  }

  // runs on initial page load
  initTOC();

  // runs on view transitions navigation. Not needed if item has "transition:persist"
  document.addEventListener("astro:after-swap", initTOC);
</script>

<style>
  .scroll-mt-20 {
    scroll-margin-top: calc(var(--spacing) * 20);
  }
</style>
